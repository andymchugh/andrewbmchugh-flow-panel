---

#------------------------------------------------------------------------------
# YAML Anchors and Aliases simplify maintenance. This is an example of an anchor
# for a link. The corresponding alias would look like:
#   link: *grafana-home

anchorLinks:
  - link: &grafana-home
      url: "https://grafana.com/"
      params: "time"

#------------------------------------------------------------------------------
# Test Settings

# Version 1.6.0 onwards: This section details test settings used in validating the functionality.
# They provide a way to drive particular code pathways.
test:
  # This changes the test timeSeries to be sparse and is used as a way to demonstrate the
  # difference between datapoint 'last' and 'lastNotNull'. Undefined defaults to false.
  testDataSparse: false

  # Version 1.11.0 onwards: By default the base offset on the curves is 1 so they travel from
  # 0 to 2. By shifting it to 0 you can have a range of -1 to +1 to test negative data.
  testDataBaseOffset: 0

  # Version 1.11.0 onwards: When set you get an extended set of datapoints around zero to facilitate
  # testing in this region.
  testDataExtendedZero: false

  # Version 1.12.0 onwards: When set test data values are extended with a string-data timeseries.
  testDataStringData: false

  # Version 1.16.0 onwards: When set test the data values are extended with a 'no-time' timeseries.
  testDataNoTime: false

#------------------------------------------------------------------------------
# Version 1.14.0 onwards: The zoomPanPinch yaml provides customization of the zoom-pan-pinch
# behavior. It can be defined in either panelConfig or siteConfig.
zoomPanPinch:
  # This optional term defines the array of keys that can be used to enable wheel zoom. There's
  # a clash of interest between panel zoom and dashboard scrolling which is easy to avoid with small
  # SVGs, but becomes more problematic when the SVG is large and covers a lot of the screen. By
  # requiring a combo such as ALT+Scroll this clash can be avoided. 
  wheelActivationKeys: ["Alt"]

#------------------------------------------------------------------------------
# Version 1.14.0 onwards: This section defines panel level defaults for the link window
linkWindow:
  # Default for '<cell>.link.sameTab'.
  sameTab: true

# Version 1.14.0 onwards: Link variables will be substituted in urls prior to passing through
# grafana variable substitution. Variables should be defined in the same format as grafana variables.
# i.e. ${urlBasePlugin}. These variables can be defined in siteConfig or panelConfig.
# Alongside these bespoke variables there are two reserved variables driven from the cell yaml of:
# ${cell.name}
# ${cell.dataRef}
# Substitution order is: reserved-vars -> siteConfig-vars -> panelConfig-vars -> grafana-vars
linkVariables:
  urlBasePlugin: "https://github.com/andymchugh/andrewbmchugh-flow-panel/blob/main/"
  urlBaseGrafana: "https://app.diagrams.net/"

#------------------------------------------------------------------------------
# Grafana Variable Scalars

# These scalars allow the grafana variable selections to impact the threshold values
# used in the panel. Each grafana variable has an array of rules where a rule applies
# to a subset of cells as defined by the cellIdPatternScope.
#
# At initialization the rule set for each cell is determined. Then at render time the first
# rule on a cell to match the variable value results in that scalar being applied. The scalars
# are accumulative across variables, but only the first rule match for a given variable will
# be applied.
variableThresholdScalars:
  system:
    - {variableValuePattern: ".*client.*", thresholdScalar: 2, cellIdPatternScope: [".*box.*"]}
  environment:
    - {variableValuePattern: "dev", thresholdScalar: 0.2, cellIdPatternScope: ["inbox_depth"]}

#------------------------------------------------------------------------------
# Highlighting

# Version 1.6.0 onwards: The Highlighter legend, when enabled in the panel options, uses this
# configuration to display the legend and highlight/lowlight the readouts based off of selection.
# Only legend tags that also exist on cell definitions will be selectable. As such you can add
# legend entries that are purely descriptive to make the tags understandable by a wider audience.
#
# This configuration works in tandem with cell level configuration. On each cell a tag array can
# be defined allowing a cell to be highlighted in multiple dimensions.

tagConfig:
  # The legend will be displayed when the Highlighter is enabled in the panel options. The array entries
  # should be either 'tags' defined on cells or descriptive text or separators. If not defined a legend
  # will be deduced from the cells tags arrays.
  legend: ["Queue Technology:", "rabbitMQ", "kafka", "|", "Flow Attribs:", "inflow", "depth", "|"]

  # This defines the legend color to apply to the tag when the tag is selected. If not defined
  # it defaults to yellow.
  color: "yellow"
  
  # This defines the rgb factor to apply to a readouts color when the readout is highlighted. Note the
  # rgb ratios are always maintained so this will result in this factor being capped. If not defined
  # it defaults to 5.0.
  highlightRgbFactor: 5.0

  # This defines the alpha factor to apply to a readout when other readouts are highlighted.
  # i.e. selections get highlighted. non-selections get lowlighted. If not defined it defaults to 0.3.
  lowlightAlphaFactor: 0.3

  # Version 1.7.0 onwards: When set this flag uses a thinner footprint for the combined highlighter
  # and timeSlider. Enable when vertical space is at a premium. Default when undefined is false.
  condensed: false

#------------------------------------------------------------------------------
# Panel Config

# Version 1.6.0 onwards: When undefined the background color is not driven. When defined the color for
# the current theme is used. Colors can be entered in all the normal ways of name, hex, hsl, etc.
background:
  darkThemeColor: "yellow"
  lightThemeColor: "green"

# Version 1.6.0 onwards: This defines which datapoint will be chosen from the time-series.
# If your datasource supports graphite functions 'keepLastValue' and 'transformNull', using those
# functions in combination with 'last' gives the most precise control. If you don't have them available,
# 'lastNotNull' allows you to approximate it. With 'last' the closest datapoint based off the timeSlider
# position is chosen. With 'lastNotNull', that datapoint is then walked back in time until a non-null value
# is found.
#
# This is the panel level default which when undefined defaults to 'last'. It can be overriden at the cell
# level and the cell-attribute level.
#
# Valid values are undefined, "last", "lastNotNull"
datapoint: "last"

# This defines the default color gradientMode. It defines the default value on cell labelColor.gradientMode
# and fillColor.gradientMode for when the field is undefined. Values are "hue" and "none" with
# "none" being the default when undefined.
gradientMode: "hue"

# This defines the preamble that will be added to every svg ID listed under 'cells'.
# It can be an empty string, which is the default value. DrawIO at the moment adds a non-configurable
# 'cell-' as shown here.
cellIdPreamble: "cell-"

# During initialization all inner cells that are id-free are assigned a new ID based off the
# parent ID. By default they will be given the id <original-id><cellIdExtender><increasing-number>
# where cellIdExtender will default if unset to "@flowrpt". If for any reason that causes your SVG ID
# clashes you can change the cellIdExtender value. But normally it's just left unset.
cellIdExtender: "@flowrpt"

# This is the default label decimalPoints setting that will be used if no override exists at the
# cell level. 'null' represents grafana's 'auto' mode. It will default to 0 if left undefined.
# This panel level override is added after version 1.4.0. In earlier versions the auto mode is not
# achievable.
cellLabelDecimalPoints: null

# This defines the set of cells that are going to be driven
cells: 
  # Each field name is the svg ID. i.e. within config this cell will be identifed as
  # 'inbox_depth'. Within the actual svg the id will be the same name prepended with cellIdPreamble,
  # e.g. 'cell-inbox_depth'.
  inbox_depth:
    # The dateRef defines the name of the time-series. This is the default time-series that will
    # be applied to all configured attributes on this cell. Note that you shouldn't set it to
    # the Grafana query name, but to a time series returned by a query (e.g. for InfluxDB, that would
    # be the 'Alias' name).
    # It can be overriden on an attribute by attribute basis.
    dataRef: "test-data-large-sin"

    # Version 1.16.0 onwards: Optional alternative data source for the cell taken from the bespoke drive
    # scope. When set it's used in preference to the dataRef value.
    bespokeDataRef: null

    # From version 1.6.0: Optional cell level override. Full write up in the panel-level term definition.
    datapoint: "last"

    # Version 1.6.0 onwards: Cell level tags work in tandem with the tagConfig above and the Highlighter
    # legend in the panel. Add your cell to tag sets by defining the relavent tags here.
    tags: ["depth", "rabbitMQ"]

    # The label field defines how the text in the cell will be adjusted based on the
    # time-series value. The time series value is postpended with a separator. If no
    # adjustment is wanted the field should be omitted. Note that multiline label preambles
    # are not supported. The 'text' label must already exist in the SVG as this drive just
    # changes its value. It does not create a text element if it is not already present in the cell.
    label:
      # Optional attribute level override for the associated time-series.
      dataRef: "test-data-large-cos"
  
      # Version 1.16.0 onwards: Optional alternative data source for the cell taken from the bespoke drive
      # scope. When set it's used in preference to the dataRef value.
      bespokeDataRef: null
    
      # Version 1.6.0 onwards: Optional attribute level override. Requires corresponding attribute level dataRef override.
      datapoint: "last"

      # Valid values are cr, space, colon, replace
      separator: "cr"

      # This defines the units of the value. The strings that should be entered can be
      # listed using the 'Debugging Units' button in the panel. A few example values
      # would be none, ops, pps, litreh, forcekNm
      units: "none"

      # From ver 1.7.0: This postfix term, when defined, will be space-concatenated to the value
      # following unit conversion. This can be used for defining custom units.
      unitsPostfix: "MyUnits"

      # The number of decimal points to display. Enter null for auto, 0 for none, etc. If left
      # undefined it will default to the value specified at the panel level in cellLabelDecimalPoints.
      # Note this is applied via the grafana units formatter. If invalid units are specified the label
      # is displayed unformatted.
      decimalPoints: 0

      # Version 1.11.0 onwards: valueMappings is an array of 'match-criteria -> text' that allows you to
      # display custom values. The array is iterated in order and breaks out on first match. If no match
      # is found value formatting (with units) continues as normal.
      #
      # value: [optional] value must match this term.
      # valueMin: [optional] value must match or exceed this term.
      # valueMax: [optional] value must match or be under this term.
      # text: text to substitute for the value when a match is made. As of version 1.13.0 this text will
      #       pass through grafana variable substitution.
      #
      # Criteria can be specified as an exact match, a range, just a min, just a max or no criteria
      # at all. The min/max terms will be ignored if an exact match is also specified. All terms are
      # optional apart from 'text'.
      valueMappings:
        - {value: null, text: "value is null"}
        - {value: 3, text: "value is 3"}
        - {valueMax: 300, text: "value is low"}
        - {valueMin: 300, valueMax: 600, text: "value in range"}
        - {valueMin: 600, text: "value is high"}

      # Version 1.11.0 onwards: valueMappings (see above) can also be specified in site config. Use
      # this term to reference that set.
      valueMappingsRef: "dbTrans"

    # The label color field defines how the text in the cell should be colored based on the
    # time-series value. If no adjustment is wanted the field should be omitted.
    labelColor:
      # Optional attribute level override for the associated time-series.
      dataRef: "test-data-large-cos"

      # Version 1.16.0 onwards: Optional alternative data source for the cell taken from the bespoke drive
      # scope. When set it's used in preference to the dataRef value.
      bespokeDataRef: null
    
      # Version 1.6.0 onwards: Optional attribute level override. Requires corresponding attribute level dataRef override.
      datapoint: "last"

      # This defines the coloring gradientMode. When set to "hue", color values will be interpolated between
      # the threshold levels. When set to "none" the colors are absolute and change when a threshold is
      # crossed. The "hue" gradientMode will work with all color definitions apart from unrecognised color names.
      # If not defined it defaults to panelConfig gradientMode.
      gradientMode: "hue"

      # Thresholds define a color, a value and a global-order. The threshold array-order matters.
      # The time-series value is compared to each threshold breaking out when it spans the surrounding
      # thresholds. The base color is the first threshold color. The first threshold value is relevent
      # only in the "hue" gradientMode as it determines the value at which the color should start to transition.
      #
      # The order term (from version 1.14.0) determines how a threshold compares across threshold sets.
      # It defaults to the array index and only needs to be explicitly defined when threshold sets are being
      # compared and the default 'array-order' is not suitable. This comparison only occurs when fields
      # labelColorCompound, strokeColorCompound or fillColorCompound are being used.
      #
      # The color can be in the following formats:
      # - a grafana color as can be seen from 'Debugging Colors'.
      # - a color reference to a color name in the siteConfig
      # - shorthex: i.e. 'f00'
      # - longhex: i.e. 'f00000'
      # - rgb: i.e. 'rgb(255, 0, 0)
      # - hsl: i.e. 'hsl(0, 100%, 50%)'
      thresholds:
        - {color: "green", level: 0, order: null}
        - {color: "orange", level: 500, order: null}
        - {color: "red", level: 1000, order: null}

      # This defines an ID to a thresholds set defined in the siteConfig. If you want to share a
      # thresholds set just within the panelConfig you should instead use a yaml anchor/alias.
      # The above 'thresholds' field takes precedence. Only if undefined will thresholdsRef be
      # checked.
      thresholdsRef: "depth"

      # Version 1.14.0 onwards: ThresholdPatterns are the same concept as thresholds but are used with
      # text data. They have the same fields apart from 'level' being substituted for 'pattern'.
      # Whereas thresholds start with a base value and then progress through the numerical levels,
      # thresholdPatterns define a regex that must be explicitely matched for the color to be applied.
      # As a match has to occur there is no 'gradient' possible. If no match occurs, no color is
      # applied, so if a default color is wanted it should be in the last 'catch-all' pattern. Pattern
      # match breaks out on first match so patterns should be defined in most-specific->least specific
      # order.
      # If both 'thresholds' and 'thresholdPatterns' are defined, 'thresholdPatterns' take precedence
      # and the 'thresholds' definitions are ignored.
      thresholdPatterns:
        queuecount:
          - {color: "green", pattern: '.*INFO.*', order: null}
          - {color: "amber", pattern: '.*WARNING.*', order: null}
          - {color: "red", pattern: '.*ERROR.*', order: null}
          - {color: "gray", pattern: '.*', order: null}

      # Version 1.14.0 onwards: This defines an ID to a thresholdPatterns set defined in the siteConfig.
      # If you want to share a thresholdPatterns set just within the panelConfig you should instead use a
      # yaml anchor/alias. The above 'thresholdPatterns' field takes precedence. Only if undefined will
      # thresholdPatternsRef be checked.
      thresholdPatternsRef: "depth"

    # Version 1.14.0 onwards: This defines an array of 'labelColor' alongside an
    # aggregation function on how the color should be chosen from the array. If 'labelColor'
    # is also defined it is prepended to this array and color is just driven from this array.
    labelColorCompound:
      # Aggregation function defined as either 'min' or 'max'. 'max' is the default.
      function: "max"

      # Array of labelColor
      colors: ...

    # Version 1.13.0 onwards: The strokeColor field defines how the cell lines should be
    # colored based on the time-series value. If no adjustment is wanted the field should be omitted.
    strokeColor:
      # See labelColor
      dataRef: "test-data-large-cos"

      # Version 1.16.0 onwards: Optional alternative data source for the cell taken from the bespoke drive
      # scope. When set it's used in preference to the dataRef value.
      bespokeDataRef: null
    
      # See labelColor
      datapoint: "last"

      # See labelColor
      gradientMode: "hue"

      # See labelColor
      thresholds:
        - {color: "semi-dark-green", level: 0}
        - {color: "orange", level: 400}
        - {color: "red", level: 800}

      # See labelColor
      thresholdsRef: "depth"

      # Version 1.14.0 onwards: See labelColor
      thresholdPatterns:
        - {color: "green", pattern: '.*INFO.*'}
        - {color: "amber", pattern: '.*WARNING.*'}
        - {color: "red", pattern: '.*ERROR.*'}
        - {color: "gray", pattern: '.*'}

      # Version 1.14.0 onwards: See labelColor
      thresholdPatternsRef: "depth"

    # Version 1.14.0 onwards: This defines an array of 'strokeColor' alongside an
    # aggregation function on how the color should be chosen from the array. If 'strokeColor'
    # is also defined it is prepended to this array and color is just driven from this array.
    strokeColorCompound:
      # Aggregation function defined as either 'min' or 'max'. 'max' is the default.
      function: "max"

      # Array of strokeColor
      colors: ...

    # The fill color field defines how the cell should be colored based on the
    # time-series value. If no adjustment is wanted the field should be omitted.
    fillColor:
      # See labelColor
      dataRef: "test-data-large-cos"

      # Version 1.16.0 onwards: Optional alternative data source for the cell taken from the bespoke drive
      # scope. When set it's used in preference to the dataRef value.
      bespokeDataRef: null
    
      # See labelColor
      datapoint: "last"

      # See labelColor
      gradientMode: "hue"

      # See labelColor
      thresholds:
        - {color: "semi-dark-green", level: 0}
        - {color: "orange", level: 400}
        - {color: "red", level: 800}

      # See labelColor
      thresholdsRef: "depth"

      # Version 1.14.0 onwards: See labelColor
      thresholdPatterns:
        - {color: "green", pattern: '.*INFO.*'}
        - {color: "amber", pattern: '.*WARNING.*'}
        - {color: "red", pattern: '.*ERROR.*'}
        - {color: "gray", pattern: '.*'}

      # Version 1.14.0 onwards: See labelColor
      thresholdPatternsRef: "depth"

    # Version 1.14.0 onwards: This defines an array of 'fillColor' alongside an
    # aggregation function on how the color should be chosen from the array. If 'fillColor'
    # is also defined it is prepended to this array and color is just driven from this array.
    fillColorCompound:
      # Aggregation function defined as either 'min' or 'max'. 'max' is the default.
      function: "max"

      # Array of fillColor
      colors: ...

    # Version 1.13.0 onwards: The fillLevel field defines the percentage-fill
    # of the cell shape. For simple shapes such as 'rect' or 'ellipse', the bounding
    # box is known so the min/max fill percentages will perfectly align. For complex
    # shapes underpinned by the 'path' element the bounding box is more approximate.
    # The approximation can be corrected by adjusting the upr and lwr fill bounds.
    # Note that fillLevel does not require fillColor to be driven. It will also work
    # with a static fill-color defined in the svg.
    fillLevel:
      # Optional attribute level override for the associated time-series.
      dataRef: "test-data-large-cos"

      # Version 1.16.0 onwards: Optional alternative data source for the cell taken from the bespoke drive
      # scope. When set it's used in preference to the dataRef value.
      bespokeDataRef: null
    
      # Optional attribute level override. Requires corresponding attribute level dataRef override.
      datapoint: "last"

      # The optional data value at or below which the fillLevel will be set to 0%.
      thresholdOffValue: 0

      # These terms define the conversion from incoming data values to percent-fill.
      thresholdLwrValue: 0
      thresholdLwrFillPercent: 0
      thresholdUprValue: 900
      thresholdUprFillPercent: 100

      # This term defines how fill is rendered. Allowed values are 'bottomToTop', 'topToBottom',
      # 'leftToRight', 'rightToLeft'. The default is 'bottomToTop'.
      fillDirection: 'bottomToTop'

    # Version 1.11.0 onwards: draw.io has a selectable line property called 'Flow Animation'.
    # When selected the line animates in a particular direction at a particular rate to
    # visualize flow. This section provides control for these animations. Note that the SVG
    # must be exported (not just saved as svg) from draw.io for these animations to work.
    # The yaml assumes directionality based on data 'sign' but that can be overriden by
    # marking it as unidirectional. The animation duration is defined with three bounds
    # of off, lower and upper.
    #
    # Whenever animations are present in this yaml data, a control is visible in the bottom
    # left corner. The panel options also allows the initial state to be selectable.
    flowAnimation:
      # Optional attribute level override for the associated time-series.
      dataRef: "test-data-large-cos"

      # Version 1.16.0 onwards: Optional alternative data source for the cell taken from the bespoke drive
      # scope. When set it's used in preference to the dataRef value.
      bespokeDataRef: null
    
      # Optional attribute level override. Requires corresponding attribute level dataRef override.
      datapoint: "last"

      # The optional absolute data value at or below which the animation will be stopped.
      thresholdOffValue: 0

      # These terms define the conversion from incoming data values to animation durations. The longer
      # the duration, the slower the animation.
      thresholdLwrValue: 100
      thresholdLwrDurationSecs: 1
      thresholdUprValue: 600
      thresholdUprDurationSecs: 0.1

      # Version 1.16.4 onwards: The optional biasPower applies a curve to how the animation speed ramps in.
      # The algorithm determines a normalised (0-1) value from the threshold value terms and then raises it
      # to this power. The power defaults to 1 which results in a linear ramp. Set it below 1 (and above 0)
      # and the speed ramps in more quickly. Set it above 1 and it will ramp in more slowly.
      biasPower: 1.0

      # Animation speeds (above) are calculated based off of the absolute data value. The direction
      # of the animation is determined off the sign of the data, unless this flag is true.
      unidirectional: true

    # Version 1.16.0 onwards: The bespoke section allows you to drive 'HTML element attribute values'
    # directly via your own 'mathjs' formulas. When you tag a 'cell' in your SVG you are actually tagging
    # an 'HTML element tree' containing all sorts of types such as 'g', 'div', 'rect', etc. By driving the
    # attributes directly on these individual elements you can manage truly bespoke widgets on your panel.
    # Elements in a cell are highly coupled and all that complexity normally gets managed by the SVG editor.
    # It's important when overriding these attribute values that the change is applied in a coherent way.
    # i.e. Rather than change the 'width' and 'height' attributes on a 'rect', instead change the
    # 'transform->scale' and 'transform-origin' on the root element of the cell. Doing this ensures everything
    # remains coherent with respect to features like the fill level drive and the cell label positioning.
    #
    # As well as driving element attributes, the values calculated in the 'mathjs' formulas can also be used as
    # the source data value for the other drives such as label, labelColor, strokeColor, etc. Via this pathway,
    # all drives can be driven from a client-defined mix of incoming data sources.
    #
    # The bespoke drive can be thought of as the following layered process:
    # - Define a namespace, a collection of cell-ids that will share bespoke values. Then in the namespace:
    # - Define a set of constants.
    # - Extract element attribute values into that set of constants.
    # - Run a set of formulas using the above constants, grafana variables and incoming dataRefs.
    # - Drive a set of element attributes using the above formula results.
    # - Source other drives (label, labelColor, etc.) from the bespoke values calculated in the formulas.
    #
    # All formulas are presented with a state object that contains:
    # - The constants you've defined and extracted.
    # - A 'utils' Framework object containing functions:
    #   - log = function(...) -> void. Forwards through to console.info. For developing and debug use.
    #   - variablesReplace = function(string) -> string. Grafana variables defined in the string in the normal
    #     '${myVar}' way are replaced in the result with the actual grafana variable values.
    # - data : Object containing an item for every dataRef defined in the namespace.
    #
    # The best way to understand this drive is to explore it via a provisioning/dashboardData example such as the
    # bespokeDrive.svg/bespokeDrive.yaml example. Start with this working example, add utils.log(data) in a formula
    # to see the incoming dataRef values you have in the console, then iterate slowly towards your goal.
    # See https://mathjs.org/examples/index.html for mathjs formula usage.

    bespoke:
      # Optional namespace for the bespoke values store. It defaults to the cell-id so by setting it you allow values
      # to be shared across a set of cell-ids.
      namespace: "myWidget"

      # Optional dataRef additions. The cell-level dataRef and all dataRefs listed here will be present on the
      # data object given to the 'renderFn'.
      dataRefs:
        - "test-data-large-sin"
        - "test-data-large-cos"

      # Optional datapoint override. Requires corresponding attribute level dataRefs override to be applied. Note that
      # data is gathered on a namespace basis so where multiple values exist within a namespace the most permissive of
      # the set is used. i.e. lastNotNull
      datapoint: "last"

      # Optional set of constants that will be available within the bespoke data store. Intended use is where formulas
      # are shared across widgets and you want to feed in 'template specialisation terms' such as which dataRefs should
      # be used in the formulas for this widget.
      constants:
        # variable-name -> constant value pairs
        clockDataRef: "test-data-large-sin"

      # Optional array of mathjs formulas. Each formula will be called in array order and values set within the formula
      # will be available to downstream formulas in this namespace. The formula passed in receives the scope object
      # described at the top of the bespoke section.
      formulas:
        # mathjs formula array
        - "a = abs(data[clockDataRef])"
        - "grafanaMyVarValue = concat(utils.variablesReplace('${myVar} '), string(a))"
        - "utils.log('this is some of my namespace', clockDataRef, boxX, boxWidth, a, grafanaMyVarValue, data)"

      # Optional array of drives to be applied to the cell tree. Each drive will be presented in array order to each element in
      # the cell tree, subject to the optional filter specified by 'elementName' and 'elementPosition'. The drive allows
      # you to fetch element attributes at initialization and then set element attributes at render time. 
      drives:
          # Optional name filter. When set the elementName must match for this drive to be called.
        - elementName: "rect"

          # Optional position filter. When set the 1-based elementPosition must match for this drive to be called.
          elementPosition: 1

          # Optional attribute fetch object. The attribute values are stored at panel initialization.
          attribsGet:
            # variable-name -> attribute name pairs
            boxX: "x"
            boxWidth: "width"

          # Optional attribute set object. The attribute values are mathjs formulas. To ensure no javascript can
          # be injected, the following restrictions exist on which attributes can be set:
          # - The attributeName cannot start with 'on'.
          # - The attribute has to either pre-exist on the SVG (after parsing through dompurify) or exist in the set:
          #   ['transform', transform-origin', 'visibility'].
          attribsSet:
            # variable-name -> attribute name pairs
            x: "boxX"
            width: "boxWidth"

    # The link defines the url to open if the cell is left clicked. Links defined in yaml can be
    # relative or absolute and go through grafana variable substitution. Note that links defined
    # directly in the SVG are opaque to the plugin and so get dealt with by the underlying framework.
    # If defining links in the SVG, absolute links should pass through correctly.
    link:
      # URL to open. It can contain parameters and those parameters can contain grafana variables.
      # The link can be relative or absolute.
      url: "https://drawio-app.com"

      # This defines what portion of the dashboard params should be added to the URL. Appended parameters
      # will correctly post-pend on any existing parameters in the above URL. The params values are:
      # 'none': this is the default
      # 'time': this is particularly useful where a relative time-band is being used as these relative terms
      #         aren't available as grafana-variables.
      # 'all': all params will be appended
      params: "time"

      # Version 1.14.0 onwards: When set the url will be opened in the same tab unless the
      # <CTRL> or <SHFT> overrides are depressed. When undefined the setting falls back to
      # the panel level 'linkWindow.sameTab' and then to the site level 'linkWindow.sameTab'.
      sameTab: true

    # This defines an ID to a link defined in the siteConfig. If you want to share a
    # link just within the panelConfig you should instead use a yaml anchor/alias.
    # The above 'link' field takes precedence. Only if undefined will linkRef be
    # checked.
    linkRef: "drawio"
