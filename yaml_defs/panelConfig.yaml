---

#------------------------------------------------------------------------------
# YAML Anchors and Aliases simplify maintenance. This is an example of an anchor
# for a link. The corresponding alias would look like:
#   link: *grafana-home

anchorLinks:
  - link: &grafana-home
      url: "https://grafana.com/"
      params: "time"

#------------------------------------------------------------------------------
# Test Settings

# Version 1.6.0 onwards: This section details test settings used in validating the functionality.
# They provide a way to drive particular code pathways.
test:
  # This changes the test timeSeries to be sparse and is used as a way to demonstrate the
  # difference between datapoint 'last' and 'lastNotNull'. Undefined defaults to false.
  testDataSparse: false

#------------------------------------------------------------------------------
# Grafana Variable Scalars

# These scalars allow the grafana variable selections to impact the threshold values
# used in the panel. Each grafana variable has an array of rules where a rule applies
# to a subset of cells as defined by the cellIdPatternScope.
#
# At initialization the rule set for each cell is determined. Then at render time the first
# rule on a cell to match the variable value results in that scalar being applied. The scalars
# are accumulative across variables, but only the first rule match for a given variable will
# be applied.
variableThresholdScalars:
  system:
    - {variableValuePattern: ".*client.*", thresholdScalar: 2, cellIdPatternScope: [".*box.*"]}
  environment:
    - {variableValuePattern: "dev", thresholdScalar: 0.2, cellIdPatternScope: ["inbox_depth"]}

#------------------------------------------------------------------------------
# Highlighting

# Version 1.6.0 onwards: The Highlighter legend, when enabled in the panel options, uses this
# configuration to display the legend and highlight/lowlight the readouts based off of selection.
# Only legend tags that also exist on cell definitions will be selectable. As such you can add
# legend entries that are purely descriptive to make the tags understandable by a wider audience.
#
# This configuration works in tandem with cell level configuration. On each cell a tag array can
# be defined allowing a cell to be highlighted in multiple dimensions.

tagConfig:
  # The legend will be displayed when the Highlighter is enabled in the panel options. The array entries
  # should be either 'tags' defined on cells or descriptive text or separators. If not defined a legend
  # will be deduced from the cells tags arrays.
  legend: ["Queue Technology:", "rabbitMQ", "kafka", "|", "Flow Attribs:", "inflow", "depth", "|"]

  # This defines the legend color to apply to the tag when the tag is selected. If not defined
  # it defaults to yellow.
  color: "yellow"
  
  # This defines the rgb factor to apply to a readouts color when the readout is highlighted. Note the
  # rgb ratios are always maintained so this will result in this factor being capped. If not defined
  # it defaults to 5.0.
  highlightRgbFactor: 5.0

  # This defines the alpha factor to apply to a readout when other readouts are highlighted.
  # i.e. selections get highlighted. non-selections get lowlighted. If not defined it defaults to 0.3.
  lowlightAlphaFactor: 0.3

#------------------------------------------------------------------------------
# Panel Config

# Version 1.6.0 onwards: When undefined the background color is not driven. When defined the color for
# the current theme is used. Colors can be entered in all the normal ways of name, hex, hsl, etc.
background:
  darkThemeColor: "yellow"
  lightThemeColor: "green"

# Version 1.6.0 onwards: This defines which datapoint will be chosen from the time-series.
# If your datasource supports graphite functions 'keepLastValue' and 'transformNull', using those
# functions in combination with 'last' gives the most precise control. If you don't have them available,
# 'lastNotNull' allows you to approximate it. With 'last' the closest datapoint based off the timeSlider
# position is chosen. With 'lastNotNull', that datapoint is then walked back in time until a non-null value
# is found.
#
# This is the panel level default which when undefined defaults to 'last'. It can be overriden at the cell
# level and the cell-attribute level.
#
# Valid values are undefined, "last", "lastNotNull"
datapoint: "last"

# This defines the default color gradientMode. It defines the default value on cell labelColor.gradientMode
# and fillColor.gradientMode for when the field is undefined. Values are "hue" and "none" with
# "none" being the default when undefined.
gradientMode: "hue"

# This defines the preamble that will be added to every svg ID listed under 'cells'.
# It can be an empty string. DrawIO at the moment adds a non-configurable 'cell-' as
# shown here.
cellIdPreamble: "cell-"

# During initialization all inner cells that are id-free are assigned a new ID based off the
# parent ID. By default they will be given the id <original-id><cellIdExtender><increasing-number>
# where cellIdExtender will default if unset to "@flowrpt". If for any reason that causes your SVG ID
# clashes you can change the cellIdExtender value. But normally it's just left unset.
cellIdExtender: "@flowrpt"

# This is the default label decimalPoints setting that will be used if no override exists at the
# cell level. 'null' represents grafana's 'auto' mode. It will default to 0 if left undefined.
# This panel level override is added after version 1.4.0. In earlier versions the auto mode is not
# achievable.
cellLabelDecimalPoints: null

# This defines the set of cells that are going to be driven
cells: 
  # Each field name is the svg ID. i.e. within config this cell will be identifed as
  # 'inbox_depth'. Within the actual svg it will be called 'cell-inbox_depth'.
  inbox_depth:
    # The dateRef defines the name of the time-series. This is the default time-series that will
    # be applied to all configured attributes on this cell. It can be overriden on an attribute
    # by attribute basis.
    dataRef: "test-data-large-sin"

    # From version 1.6.0: Optional cell level override. Full write up in the panel-level term definition.
    datapoint: "last"

    # Version 1.6.0 onwards: Cell level tags work in tandem with the tagConfig above and the Highlighter
    # legend in the panel. Add your cell to tag sets by defining the relavent tags here.
    tags: ["depth", "rabbitMQ"]

    # The label field defines how the text in the cell will be adjusted based on the
    # time-series value. The time series value is postpended with a separator. If no
    # adjustment is wanted the field should be omitted. Note that multiline label preambles
    # are not supported.
    label:
      # Optional attribute level override for the associated time-series.
      dataRef: "test-data-large-cos"
  
      # Version 1.6.0 onwards: Optional attribute level override. Requires corresponding attribute level dataRef override.
      datapoint: "last"

      # Valid values are cr, space, colon, replace
      separator: "cr"

      # This defines the units of the value. The strings that should be entered can be
      # listed using the 'Debugging Units' button in the panel. A few example values
      # would be none, ops, pps, litreh, forcekNm
      units: "none"

      # From ver 1.7.0: This postfix term, when defined, will be space-concatenated to the value
      # following unit conversion. This can be used for defining custom units.
      unitsPostfix: "MyUnits"

      # The number of decimal points to display. Enter null for auto, 0 for none, etc. If left
      # undefined it will default to the value specified at the panel level in cellLabelDecimalPoints. 
      decimalPoints: 0

    # The label color field defines how the text in the cell should be colored based on the
    # time-series value. If no adjustment is wanted the field should be omitted.
    labelColor:
      # Optional attribute level override for the associated time-series.
      dataRef: "test-data-large-cos"

      # Version 1.6.0 onwards: Optional attribute level override. Requires corresponding attribute level dataRef override.
      datapoint: "last"

      # This defines the coloring gradientMode. When set to "hue", color values will be interpolated between
      # the threshold levels. When set to "none" the colors are absolute and change when a threshold is
      # crossed. The "hue" gradientMode will work with all color definitions apart from unrecognised color names.
      # If not defined it defaults to panelConfig gradientMode.
      gradientMode: "hue"

      # Thresholds define a color and a value. The threshold array order matters. The time-series
      # value is compared to each threshold breaking out when it spans the surrounding thresholds.
      # The base color is the first threshold color. The first threshold value is relevent only in
      # the "hue" gradientMode as it determines the value at which the color should start to transition.
      #
      # The color can be in the following formats:
      # - a grafana color as can be seen from 'Debugging Colors'.
      # - a color reference to a color name in the siteConfig
      # - shorthex: i.e. 'f00'
      # - longhex: i.e. 'f00000'
      # - rgb: i.e. 'rgb(255, 0, 0)
      # - hsl: i.e. 'hsl(0, 100%, 50%)'
      thresholds:
        - {color: "green", level: 0}
        - {color: "orange", level: 500}
        - {color: "red", level: 1000}

      # This defines an ID to a thresholds set defined in the siteConfig. If you want to share a
      # thresholds set just within the panelConfig you should instead use a yaml anchor/alias.
      # The above 'thresholds' field takes precedence. Only if undefined will thresholdsRef be
      # checked.
      thresholdsRef: "depth"

    # The fill color field defines how the cell should be colored based on the
    # time-series value. If no adjustment is wanted the field should be omitted.
    fillColor:
      # See labelColor
      dataRef: "test-data-large-cos"

      # See labelColor
      datapoint: "last"

      # See labelColor
      gradientMode: "hue"

      # See labelColor
      thresholds:
        - {color: "semi-dark-green", level: 0}
        - {color: "orange", level: 400}
        - {color: "red", level: 800}

      # See labelColor
      thresholdsRef: "depth"

    # The link defines the url to open if the cell is left clicked.
    link:
      # URL to open. It can contain parameters and those parameters can contain grafana variables.
      url: "https://drawio-app.com"

      # This defines what portion of the dashboard params should be added to the URL. Appended parameters
      # will correctly post-pend on any existing parameters in the above URL. The params values are:
      # 'none': this is the default
      # 'time': this is particularly useful where a relative time-band is being used as these relative terms
      #         aren't available as grafana-variables.
      # 'all': all params will be appended
      params: "time"
      
    # This defines an ID to a link defined in the siteConfig. If you want to share a
    # link just within the panelConfig you should instead use a yaml anchor/alias.
    # The above 'link' field takes precedence. Only if undefined will linkRef be
    # checked.
    linkRef: "drawio"
